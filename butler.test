<?php

class ButlerTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Butler functionality',
      'description' => 'Test the Butler context object.',
      'group' => 'Butler',
    );
  }

  function setUp() {
    parent::setUp('butler');
  }

  /**
   * Test simple handler registration.
   */
  function testSimpleRegistration() {
    $_GET['foo'] = 'bar';
    
    $butler = new DrupalContext(new ButlerFakeRequest(array('foo' => 'bar')));

    $butler->registerHandler('http:get', 'ContextHandlerHttp', array('query' => 'GET'));
    $butler->lock();

    $param = $butler['http:get:foo'];

    $this->assertEqual($param, 'bar', t('Correct Http GET fragment found.'));
  }

  function testExplicitContext() {
    $butler = new DrupalContext(new ButlerFakeRequest());

    $butler['foo:bar'] = 'baz';

    $butler->lock();

    $this->assertEqual($butler['foo:bar'], 'baz', t('Explicit context set correctly.'));
  }

  function testExplicitContextOverride() {
    $butler = new DrupalContext(new ButlerFakeRequest());

    // This handler would return "one".
    $butler->registerHandler('foo:bar', 'ButlerTestCaseHelperOne');

    // But we override it to "two".
    $butler['foo:bar'] = 'two';

    $butler->lock();

    $this->assertEqual($butler['foo:bar'], 'two', t('Explicit context overridden correctly.'));
  }

  /**
   * Test that we can lock a context object against modification.
   */
  function testLockStatusExplcit() {
    $butler = new DrupalContext(new ButlerFakeRequest());

    try {
      $butler->lock();
      // This should throw an exception.
      $butler['foo:bar'] = 'baz';

      $this->fail(t('Exception not thrown when setting context on a locked object.'));
    }
    catch (ButlerLockedException $e) {
      $this->pass(t('Proper exception thrown when setting context on a locked object.'));
    }
    catch (Exception $e) {
      $this->fail(t('Incorrect exception thrown when modifying a locked object.'));
    }
  }

  /**
   * Test that we can lock a context object against modification.
   */
  function testLockStatusDerived() {
    $butler = new DrupalContext(new ButlerFakeRequest());

    try {
      $butler->lock();
      // This should throw an exception.
      $butler->registerHandler('foo:bar', 'ButlerTestCaseHelperOne');

      $this->fail(t('Exception not thrown when setting context on a locked object.'));
    }
    catch (ButlerLockedException $e) {
      $this->pass(t('Proper exception thrown when setting context handler on a locked object.'));
    }
    catch (Exception $e) {
      $this->fail(t('Incorrect exception thrown when modifying a locked object.'));
    }
  }
}

class ButlerTestCaseHelperOne extends ContextHandlerAbstract {

  public function getValue(array $args = array()) {
    return 'one';
  }
}

class ButlerFakeRequest extends DrupalRequestHttp {

  public function __construct($get = array(), $post = array()) {
    parent::__construct();

    $get += array(
      'q' => '',
    );

    $this->getQuery = $get;
    $this->postQuery = $post;
  }

}
