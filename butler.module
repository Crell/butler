<?php

/**
 * Exception thrown when attempting to modify a locked context object.
 */
class ButlerLockedException extends Exception {}

/**
 * Exception thrown when attempting to use an unlocked context object.
 */
class ButlerNotLockedException extends Exception {}

interface DrupalRequestInterface {
  /**
   * Retrieves a value from the GET query.
   *
   * See the PHP ext/filter documentation for details.
   *
   * @link http://www.php.net/manual/en/book.filter.php
   *
   * @param string $param
   *   The name of the GET parameter to retrieve.
   * @param int $filter
   *   The PHP filter rules to apply to the filter. See the ext/filter
   *   documentation for a complete list of available settings.
   * @param array $options
   *   An array of options to customize $filter.  See the ext/filter
   *   documentation for a complete list of available settings.
   * @return mixed
   */
  public function get($param, $filter = FILTER_UNSAFE_RAW, $options = array());

  /**
   * Retrieves a value from the POST query.
   *
   * See the PHP ext/filter documentation for details.
   *
   * @link http://www.php.net/manual/en/book.filter.php
   *
   * @param int $filter
   *   The PHP filter rules to apply to the filter. See the ext/filter
   *   documentation for a complete list of available settings.
   * @param array $options
   *   An array of options to customize $filter.  See the ext/filter
   *   documentation for a complete list of available settings.
   *
   * @return mixed
   */
  public function post($param, $filter = FILTER_UNSAFE_RAW, $options = array());

  /**
   * Retrives an arbitrary HTTP header.
   *
   * @param string $header
   *   The name of the header to request.
   * @return mixed
   */
  public function header($header);

}

class DrupalRequestHttp implements DrupalRequestInterface {

  protected $getQuery;

  protected $postQuery;

  protected $filesQuery;

  protected $cookieQuery;

  protected $requestQuery;

  protected $requestHeaders;

  public function __construct() {
    $this->getQuery = $_GET;
    $this->postQuery = $_POST;
    $this->filesQuery = $_FILES;
    $this->cookieQuery = $_COOKIE;
    $this->requestQuery = $_REQUEST;

    array_walk($this->getQuery, '_fix_gpc_magic');
    array_walk($this->postQuery, '_fix_gpc_magic');
    array_walk($this->filesQuery, '_fix_gpc_magic');
    array_walk($this->cookieQuery, '_fix_gpc_magic');
    array_walk($this->requestQuery, '_fix_gpc_magic');
  }

  /**
   * Implements DrupalRequestInterface::get().
   */
  public function get($param, $filter = FILTER_UNSAFE_RAW, $options = array()) {
    if (!empty($this->getQuery[$param])) {
      return filter_var($this->getQuery[$param], $filter, $options);
    }
    return FALSE;
  }

  /**
   * Implements DrupalRequestInterface::post().
   */
  public function post($param, $filter = FILTER_UNSAFE_RAW, $options = array()) {
    if (!empty($this->postQuery[$param])) {
      return filter_var($this->postQuery[$param], $filter, $options);
    }
    return FALSE;
  }


  /**
   * Implements DrupalRequestInterface::header().
   */
  public function header($header) {
    // @todo This is, of course, Apache-specific.  We need to find the IIS
    // equilvalent, too.  Maybe that's even an alternate class implementation?
    if (!$this->headers) {
      $this->requestHeaders = apache_request_headers();
    }

    // @todo This needs proper escaping.  I'm not entirely sure how to do that.
    return isset($this->requestHeaders[$header]) ? $this->requestHeaders[$header] : NULL;
  }

}

/**
 * Interface definition for all context objects.
 */
interface DrupalContextInterface extends ArrayAccess {

  /**
   * Access the HTTP request information.
   *
   * @return DrupalRequestInterface
   */
  public function request();

  /**
   * Register a class as the handler for a given context.
   *
   * @param string $context
   *   The context key to register for, such as "http:get".
   * @param string $class
   *   The name of the class that will handle this context key, unless overridden.
   *   The class must implement ContextHandlerInterface.
   * @param array $params
   *   An array of configuration options for the class.
   */
  public function registerHandler($context, $class, $params = array());

  /**
   * Lock this context object against futher modification.
   *
   * This allows us to setup a mocked context object very easily, and then
   * make it immutable so we know that it won't change out from under us.
   */
  public function lock();

}

/**
 * Default Drupal context Butler.
 *
 * It handles routing of context requests to handlers.
 */
class DrupalContext implements DrupalContextInterface {

  /**
   * The query string for this page. This generally means the value of $_GET['q'].
   *
   * @var string
   */
  protected $queryString;

  /**
   * Index of registered handler classes.
   *
   * @var array
   */
  protected $handlerClasses = array();

  /**
   * Index of already-instantiated handler objects.
   *
   * @var array
   */
  protected $handlers = array();

  /**
   * Key/value store of already-derived context information.
   *
   * @var array
   */
  protected $context = array();

  /**
   * The initial request object that started this page request.
   *
   * @var DrupalRequestInterface
   */
  protected $request = NULL;

  /**
   * Whether or not this object has been locked against further changes.
   * @var boolean
   */
  protected $locked = FALSE;

  public function __construct(DrupalRequestInterface $request) {
    $this->request = $request;

    $this->queryString = $this->request->get('q');
  }

  /**
   * Implmenents DrupalContextInterface::request().
   */
  public function request() {
    return $this->request;
  }

  public function arg($index) {
    // @todo Eventually reverse this, so arg() calls context->arg().
    return arg($index, $this->queryString);
  }

  /**
   * Implements ArrayAccess:offsetExists().
   */
  public function offsetExists($offset) {
    return isset($this->handlers[$offset]);
  }

  /**
   * Implements ArrayAccess:offsetGet().
   */
  public function offsetGet($offset) {
    if (!$this->locked) {
      throw new ButlerNotLockedException(t('This butler object has not been locked. It must be locked before it can be used.'));
    }

    if (!isset($this->context[$offset])) {
      $context_key = $offset;
      $offset_elements = explode(':', $offset);
      $args = array();
      while ($offset_elements && !isset($this->handlerClasses[$context_key])) {
        $args[] = array_pop($offset_elements);
        $context_key = implode(':', $offset_elements);
      }

      $context_key = implode(':', $offset_elements);
      if (class_exists($this->handlerClasses[$context_key]['class'])) {
        $this->handlers[$context_key] = new $this->handlerClasses[$context_key]['class']($this, $this->handlerClasses[$context_key]['params']);
        $this->context[$offset] = $this->handlers[$context_key]->getValue($args);
      }
      else {
        $this->context[$offset] = NULL;
      }
    }

    return $this->context[$offset];
  }

  /**
   * Implements ArrayAccess:offsetSet().
   */
  public function offsetSet($offset, $value) {
    if ($this->locked) {
      throw new ButlerLockedException(t('This butler object has been locked. It no longer accepts new explicit context sets.'));
    }
    // Set an explicit override for a given context value.
    $this->context[$offset] = $value;
  }

  /**
   * Implements ArrayAccess:offsetUnset().
   */
  public function offsetUnset($offset) {
    if ($this->locked) {
      throw new ButlerLockedException(t('This butler object has been locked. It no longer accepts context clears.'));
    }
    // Unset any saved context so that it can be regenerated by the context
    // handler as needed.
    unset($this->context[$offset]);
  }

  /**
   * Implmenents DrupalContextInterface::registerHandler().
   */
  public function registerHandler($context, $class, $params = array()) {
    if ($this->locked) {
      throw new ButlerLockedException(t('This butler object has been locked. It no longer accepts new handler registrations.'));
    }
    $this->handlerClasses[$context] = array('class' => $class, 'params' => $params);
  }

  /**
   * Implmenents DrupalContextInterface::lock().
   */
  public function lock() {
    $this->locked = TRUE;
  }
}

/**
 * Implements hook_menu().
 */
function butler_menu() {
  $items = array();

  $items['butler'] = array(
    'title' => 'Butler testing',
    'page callback' => 'butler_test',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback; Basic testing page for Butler logic.
 */
function butler_test() {

  $butler = new DrupalContext(new DrupalRequestHttp());

  module_invoke_all('context_init', $butler);

  $butler->lock();

  dpm($butler);

  $q = $butler['http:get:q'];

  dpm($q);


  // To check caching.
  $q = $butler['http:get:q'];

  $foo = $butler['http:header:foo'];

  return 'x';
}

/**
 * Implements hook_context_init().
 *
 * @param DrupalContextInterface $butler
 */
function butler_context_init(DrupalContextInterface $butler) {
  $butler->registerHandler('http:get', 'ContextHandlerHttp', array('query' => 'GET'));
  $butler->registerHandler('http:post', 'ContextHandlerHttp', array('query' => 'POST'));
  $butler->registerHandler('http:header', 'ContextHandlerHeader');
}

/**
 * Interface for context handler objects.
 */
interface ContextHandlerInterface {

  /**
   * Retrieves the value for this context key.
   *
   * This value must be assumed to be immutable within a given request.
   *
   * @param array $args
   *   Arguments to pass into the context handler.  Arguments are derived from
   *   the portion of the context key after the key fragment that led to this
   *   handler.
   * @return mixed
   *   The corresponding value for this context.
   */
  public function getValue(array $args = array());
}

/**
 * Base implementation of a Context Handler.
 *
 * Other handlers may extend this class to make their job easier.
 */
abstract class ContextHandlerAbstract implements ContextHandlerInterface {

  /**
   * Reference to the context object.
   *
   * Note: This creates a circular reference.  We should probably get rid of it
   * and pass it every time.
   *
   * @todo Get rid of this property and avoid the circular dependency.
   *
   * @var DrupalContextInterface
   */
  protected $context;

  /**
   * Parameters for the context handler.
   *
   * @var array
   */
  protected $params;

  public function __construct(DrupalContextInterface $context, $params) {
    $this->context = $context;
    $this->params = $params;
  }
}

class ContextHandlerHttp extends ContextHandlerAbstract {

  public function getValue(array $args = array()) {
    // @todo Make this actually generic.
    $param = $args[0];
    if ($this->params['query'] == 'GET') {
      return $this->context->request()->get($param);
    }
    if ($this->params['query'] == 'POST') {
      return $this->context->request()->post($param);
    }
  }
}

