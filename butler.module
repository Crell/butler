<?php

interface DrupalRequestInterface {

}

class DrupalRequestHttp implements DrupalRequestInterface {

  protected $getQuery;

  protected $postQuery;

  protected $filesQuery;

  protected $cookieQuery;

  protected $requestQuery;

  protected $requestHeaders;

  public function __construct() {
    $this->getQuery = $_GET;
    $this->postQuery = $_POST;
    $this->filesQuery = $_FILES;
    $this->cookieQuery = $_COOKIE;
    $this->requestQuery = $_REQUEST;

    array_walk($this->getQuery, '_fix_gpc_magic');
    array_walk($this->postQuery, '_fix_gpc_magic');
    array_walk($this->filesQuery, '_fix_gpc_magic');
    array_walk($this->cookieQuery, '_fix_gpc_magic');
    array_walk($this->requestQuery, '_fix_gpc_magic');
  }

  public function __get($var) {
    if ($var == 'get') {
      return $this->getQuery;
    }
  }

  public function __set($var, $val) {
    if ($var == 'get' || $var == 'post') {
      // @todo Real error handling.
      return NULL;
    }

  }

  public function header($header) {
    // @todo This is, of course, Apache-specific.  We need to find the IIS
    // equilvalent, too.  Maybe that's even an alternate class implementation?
    if (!$this->headers) {
      $this->requestHeaders = apache_request_headers();
    }

    // @todo This needs proper escaping.  I'm not entirely sure how to do that.
    return isset($this->requestHeaders[$header]) ? $this->requestHeader : NULL;
  }

}

interface DrupalContextInterface extends ArrayAccess {

}

class DrupalContext implements DrupalContextInterface {

  protected $queryString;

  protected $handlerClasses = array();

  protected $handlers = array();

  protected $context = array();

  protected $request = NULL;

  public function __construct(DrupalRequestInterface $request) {
    $this->request = $request;

    $this->queryString = $this->request->get['q'];
  }

  /**
   * Access the HTTP request information.
   *
   * @return DrupalRequestInterface
   */
  public function request() {
    return $this->request;
  }

  public function arg($index) {
    // @todo Eventually reverse this, so arg() calls context->arg().
    return arg($index, $this->queryString);
  }

  public function offsetExists($offset) {
    return isset($this->handlers[$offset]);
  }

  public function offsetGet($offset) {
    if (!isset($this->context[$offset])) {
      if (isset($this->handlerClasses[$offset])) {
        $this->handlerClasses[$offset] = "Context_{$offset}";
      }
      if (class_exists($this->handlerClasses[$offset])) {
        $this->handlers[$offset] = new $this->handlerClasses[$offset];
        $this->context[$offset] = $this->handlers[$offset]->getValue();
      }
      else {
        $this->context[$offset] = NULL;
      }
    }

    return $this->context[$offset];
  }

  public function offsetSet($offset, $value) {
    // Do nothing, because we don't want people to be able to directly modify
    // context handlers.
  }

  public function offsetUnset($offset) {
    // Do nothing, I guess?
  }

  public function registerHandler($offset, $class) {
    $this->handerClasses[$offset] = $class;
  }
}

/**
 * Implements hook_menu().
 */
function butler_menu() {
  $items = array();

  $items['butler'] = array(
    'title' => 'Butler testing',
    'page callback' => 'butler_test',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function butler_test() {

  $butler = new DrupalContext(new DrupalRequestHttp());

  module_invoke_all('context_init', $butler);

  dpm($butler);

  $q = $butler['http:get:q'];

  dpm($q);

  return 'x';
}

function butler_context_init(DrupalContextInterface $butler) {

  $butler->registerHandler('http:get', 'ContextHandlerHttp');


}

class ContextHandlerHttp {

  protected $context;

  public function __construct(DrupalContextInterface $context) {
    $this->context = $context;
  }

  public function getValue() {
    $q = $this->context->request()->get['q'];
  }
}
